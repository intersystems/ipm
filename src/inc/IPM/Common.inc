ROUTINE %IPM.Common [Type=INC]

#define FileTempDirSys	$zu(140,17,##class(%SYS.System).TempDirectory())

#; Helper for XML import of documents
#define ZPMStudioDocumentModule %IPMStudioDocumentModule

#; Local % Variable to track modules already handled for a given end goal
#define ZPMHandledModules %IPMHandledModules

#; Local % Variable to indicate that ^Sources update trigger should not be run for modifications to individual resources
#define ZPMDeferModifyResources %IPMDeferModifyResources

#; Default packages for package manager, module lifecycle classes and resource processors
#define ZPMRootPackage "%IPM"

#define DefaultLifecyclePackage $$$ZPMRootPackage_".Lifecycle"
#define DefaultLifecyclePackageDot $$$DefaultLifecyclePackage_"."
#define DefaultProcessorPackage $$$ZPMRootPackage_".ResourceProcessor"
#define DefaultProcessorPackageDot $$$DefaultProcessorPackage_"."

#; Various globals
#define ZPMConfig ^IPM.Config
#define ZPMTempLoadGraphRoot ^IRIS.Temp.PackageManagerLoad
#def1arg ZPMTempLoadGraph(%subscripts) ^IRIS.Temp.PackageManagerLoad(%subscripts)
#define ZPMDependencyTempData ^IRIS.Temp.IPMDependency
#define ZPMDependencyTempDataNext $Increment($$$ZPMDependencyTempData)
/// Global to keep track of packages in the current namespace for invalid reference
/// checks in the dependency analyzer
#define ZPMDependencyNsPackages ^IRIS.Temp.IPMDepNsPackages
#define ZPMDefaultModifiers ^%IPM.DefaultModifiers

#; Temp global used to store source control output from CSP pages to be shown in Studio/Atelier console
#define ZPMExtensionOutput ^IRIS.Temp.IPMExtensionOutput($Username,$Namespace)
#define ZPMExtensionOutputClear Kill $$$ZPMExtensionOutput
#define ZPMExtensionOutputSet(%array) $$$ZPMExtensionOutputClear Merge $$$ZPMExtensionOutput = %array
#define ZPMExtensionOutputGet(%array) Merge %array = $$$ZPMExtensionOutput

#; Log levels
#define ZPMLogTRACE		0
#define ZPMLogINFO			1
#define ZPMLogWARNING		2
#define ZPMLogERROR		3

#; System method/special variable wrappers
#define InProgrammerMode ##class(%SYSTEM.Process).IsProgrammerMode()

#; CLI tools
#define HasModifier(%array,%x) ''$Data(%array("modifiers",%x))
#define GetModifier(%array,%x) $Get(%array("modifiers",%x))
#define GetModifierDef(%array,%x,%y) $Get(%array("modifiers",%x),%y)
#define YesNo(%val) $Select(%val:$$$Text("Yes"),1:$$$Text("No"))

/// OS corresponding slash
#define SLASH $Select($$$isWINDOWS: "\", 1: "/")

#define IPMModuleName "zpm"
#define IPMServerRegistryModuleName "zpm-registry"

#; Macros used in language extension generation
#def1arg STARTTAGQ " ;Generated by %IPM.Main: Start"
#def1arg ENDTAGQ " ;Generated by %IPM.Main: End"
#def1arg STARTTAGREGEX "^ ;Generated by (%IPM.Main|%ZPM.PackageManager): Start$"
#def1arg ENDTAGREGEX "^ ;Generated by (%IPM.Main|%ZPM.PackageManager): End$"
#def1arg STARTTAG ##Expression($$$STARTTAGQ)
#def1arg ENDTAG ##Expression($$$ENDTAGQ)

#; Variable to mark deprecation warning has been shown in the current process
#define DeprecationWarned %IPMModuleDeprecatedResource

#; Convert module version from/to OCI tag
#def1arg Semver2Tag(%semver) $Replace(%semver,"+","_")
#def1arg Tag2Semver(%tag) $Replace(%tag,"_","+")